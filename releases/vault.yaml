---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: mysql-vault
  namespace: vault
  annotations:
    fluxcd.io/automated: "true"
    fluxcd.io/tag.chart-image: glob:3.1.1-debian-9-*
spec:
  releaseName: mysql-vault
  targetNamespace: vault
  chart:
    repository: https://kubernetes-charts.storage.googleapis.com/
    name: mysql
    version: 1.6.2

  values:
    mysqlUser: vault
    mysqlDatabase: vault


---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: vault
  namespace: vault
  annotations:
    fluxcd.io/automated: "true"
    fluxcd.io/tag.chart-image: glob:3.1.1-debian-9-*
spec:
  releaseName: vault
  chart:
    repository: https://kubernetes-charts.banzaicloud.com
    name: vault
    version: 0.10.0

  values:

    replicaCount: 2
    strategy:
      type: RollingUpdate

    service:
      name: vault
      type: ClusterIP
      port: 8200

    image:
      repository: vault
      tag: 1.3.1
      pullPolicy: IfNotPresent

    vault:
      logLevel: debug      
      config:
        #
        # A YAML representation of a final vault config.json file.
        # See https://www.vaultproject.io/docs/configuration/ for more information.
        #
        listener:
          tcp:
            address: '[::]:8200'
            # tls_disable: true
            tls_cert_file: /vault/tls/server.crt
            tls_key_file: /vault/tls/server.key        
        storage:
          mysql:
            address: mysql-vault.vault.svc.cluster.local:3306
            username: vault
            password: "${ .Env.MYSQL_VAULT_PASSWORD }"
            ha_enabled: "true"
          # consul:
          #   address: "myconsul-svc-name:8500"
          #   path: "vault"

        ui: true

      externalConfig:
        #
        # Allows creating policies in Vault which can be used later on in roles
        # for the Kubernetes based authentication.
        # See https://www.vaultproject.io/docs/concepts/policies.html for more information.
        #
        policies:
          - name: allow_secrets
            rules: path "secret/*" {
                    capabilities = ["create", "read", "update", "delete", "list"]
                  }
        auth:
          - type: kubernetes
            # Allows creating roles in Vault which can be used later on for the Kubernetes based
            # authentication.
            # See https://www.vaultproject.io/docs/auth/kubernetes.html#creating-a-role for
            # more information.
            roles:
              # Allow every pod in the default namespace to use the secret kv store
              - name: default
                bound_service_account_names: default
                bound_service_account_namespaces: default
                policies: allow_secrets
                ttl: 1h
        secrets:
          - path: secret
            type: kv
            description: General secrets.
            options:
              version: 2
          

      envs: []
      customSecrets: []
      envSecrets: 
        - secretName: mysql-vault
          secretKey: mysql-password
          envName: MYSQL_VAULT_PASSWORD

    vaultEnvsConfig:
      - name: MYSQL_VAULT_PASSWORD
        valueFrom:
          secretKeyRef:
            name: mysql-vault
            key: mysql-password

    unsealer:
      image:
        repository: banzaicloud/bank-vaults
        tag: master
        pullPolicy: IfNotPresent
      args: ["--mode", "k8s", "--k8s-secret-namespace", "vault", "--k8s-secret-name", "bank-vaults"]

      # metrics:
      #   enabled: true
      #   debug: true
      #   name: metrics
      #   type: ClusterIP
      #   port: 9091
      #   serviceMonitor:
      #     enabled: false
      #     additionalLabels: {}
      #   annotations:
      #     prometheus.io/scrape: "true"
      #     prometheus.io/path: "/metrics"
      #     prometheus.io/port: "9091"


# ---
# apiVersion: vault.banzaicloud.com/v1alpha1
# kind: Vault
# metadata:
#   name: vault
#   namespace: vault

# spec:
#   size: 2
#   image: vault:1.2.3
#   bankVaultsImage: banzaicloud/bank-vaults:latest

#   annotations:
#     prometheus.io/scrape: 'true'
#     prometheus.io/port: '9102'

#   # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
#   serviceAccount: vault

#   # Specify how many nodes you would like to have in your etcd cluster
#   # NOTE: -1 disables automatic etcd provisioning
#   etcdSize: 1

#   # Specify the PersistentVolumeClaim Spec which will be used as a storage for etcd
#   # if it is not specified emptydir will be used
#   etcdPVCSpec:
#     accessModes:
#       - ReadWriteOnce
#     resources:
#       requests:
#         storage: 1Gi

#   # This option allows you to annotate the ETCD Cluster that Vault Operator creates.
#   # It's specifically to annotate the ETCD Cluster as 'clusterwide' for a cluster wide
#   # ETCD Operator, however it can be used to set any arbitrary annotations on the ETCD Cluster.
#   etcdAnnotations:
#     etcd.database.coreos.com/scope: clusterwide
#   etcdVersion: "3.3.17"

#   # Annotations to be applied to the POD Specs
#   etcdPodAnnotations:
#     backup.velero.io/backup-volumes: "YOUR_VOLUME_NAME"

#   # Support for distributing the generated CA certificate Secret to other namespaces.
#   # Define a list of namespaces or use ["*"] for all namespaces.
#   caNamespaces:
#     - "vswh"

#   # Describe where you would like to store the Vault unseal keys and root token.
#   unsealConfig:
#     kubernetes:
#       secretNamespace: default

#   # A YAML representation of a final vault config file.
#   # See https://www.vaultproject.io/docs/configuration/ for more information.
#   config:
#     storage:
#       etcd:
#         address: https://etcd-cluster:2379
#         ha_enabled: "true"
#         # NOTE: specifiying the etcd API version is strongly encouraged,
#         # since etcd version 3.4 doesn't offer v2 version by default anymore.
#         # https://github.com/etcd-io/etcd/blob/master/Documentation/upgrades/upgrade_3_4.md
#         etcd_api: "v3"
#     listener:
#       tcp:
#         address: "0.0.0.0:8200"
#         tls_cert_file: /vault/tls/server.crt
#         tls_key_file: /vault/tls/server.key
#     api_addr: https://vault.default:8200
#     telemetry:
#       statsd_address: localhost:9125
#     ui: true

#   # See: https://github.com/banzaicloud/bank-vaults#example-external-vault-configuration for more details.
#   externalConfig:
#     policies:
#       - name: allow_secrets
#         rules: path "secret/*" {
#           capabilities = ["create", "read", "update", "delete", "list"]
#           }

#     auth:
#       - type: kubernetes
#         roles:
#           # Allow every pod in the default namespace to use the secret kv store
#           - name: default
#             bound_service_account_names: ["default", "vault-secrets-webhook"]
#             bound_service_account_namespaces: ["default", "vswh"]
#             policies: allow_secrets
#             ttl: 1h

#     secrets:
#       - path: secret
#         type: kv
#         description: General secrets.
#         options:
#           version: 2

#     # Allows writing some secrets to Vault (useful for development purposes).
#     # See https://www.vaultproject.io/docs/secrets/kv/index.html for more information.
#     startupSecrets:
#       - type: kv
#         path: secret/data/accounts/aws
#         data:
#           data:
#             AWS_ACCESS_KEY_ID: secretId
#             AWS_SECRET_ACCESS_KEY: s3cr3t
#       - type: kv
#         path: secret/data/dockerrepo
#         data:
#           data:
#             DOCKER_REPO_USER: dockerrepouser
#             DOCKER_REPO_PASSWORD: dockerrepopassword
#       - type: kv
#         path: secret/data/mysql
#         data:
#           data:
#             MYSQL_ROOT_PASSWORD: s3cr3t
#             MYSQL_PASSWORD: 3xtr3ms3cr3t




