
# Pre-work to make this demo work properly:
#
# Assumes that 
#   1) vault server is on a service named "vault-server" 
#   2) in namespace "vault" 
#
# $ export VAULT_TOKEN=$(kubectl get secrets vault-server-unseal-keys -n vault -o jsonpath={.data.vault-root} | base64 --decode)
#
# # Tell the CLI that the Vault Cert is signed by a custom CA
#
# $ kubectl get secret vault-server-tls -n vault -o jsonpath="{.data.ca\.crt}" | base64 --decode > vault-ca.crt
# export VAULT_CACERT=vault-ca.crt
#
# # Tell the CLI where Vault is listening (the certificate has 127.0.0.1 as well as alternate names)
#
# export VAULT_ADDR=https://127.0.0.1:8200
#
# # Forward the TCP connection from your Vault pod to localhost (in the background)
#
# kubectl port-forward service/vault-server -n vault 8200 &
#
# # Write a secret into Vault, which will be injected as an environment variable
#
# vault kv put secret/accounts/aws AWS_SECRET_ACCESS_KEY=s3cr3t

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-secrets
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hello-secrets-vault
  template:
    metadata:
      labels:
        app: hello-secrets-vault
      annotations:
        vault.security.banzaicloud.io/vault-addr: "https://vault-server.vault:8200"
        vault.security.banzaicloud.io/vault-tls-secret: "vault-server-tls"
    spec:
      serviceAccountName: default
      containers:
      - name: alpine
        image: alpine
        command: ["sh", "-c", "echo $AWS_SECRET_ACCESS_KEY && echo going to sleep... && sleep 10000"]
        env:
        - name: AWS_SECRET_ACCESS_KEY
          value: "vault:secret/data/accounts/aws#AWS_SECRET_ACCESS_KEY"


# Put the MySQL passwords into Vault
# $ vault kv put secret/mysql MYSQL_ROOT_PASSWORD=s3cr3t MYSQL_PASSWORD=3xtr3ms3cr3t


---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: mysql-vault-integration-demo
  namespace: default
  annotations:
    fluxcd.io/automated: "true"
    fluxcd.io/tag.chart-image: glob:3.1.1-debian-9-*
spec:
  releaseName: mysql-vault-integration-demo
  targetNamespace: default
  chart:
    repository: https://kubernetes-charts.storage.googleapis.com/
    name: mysql
    version: 1.6.2

  values:

    mysqlRootPassword: "vault:secret/data/mysql#MYSQL_ROOT_PASSWORD"
    mysqlPassword: "vault:secret/data/mysql#MYSQL_PASSWORD"
    
    podAnnotations:
      vault.security.banzaicloud.io/vault-addr: https://vault-server.vault:8200
      vault.security.banzaicloud.io/vault-tls-secret: vault-server-tls


# kubectl create secret docker-registry dockerhub \
#         --docker-username="vault:secret/data/dockerrepo#DOCKER_REPO_USER" \
#         --docker-password="vault:secret/data/dockerrepo#DOCKER_REPO_PASSWORD"
# kubectl annotate secret dockerhub vault.security.banzaicloud.io/vault-addr="https://vault-server.vault.svc.cluster.local:8200"
# kubectl annotate secret dockerhub vault.security.banzaicloud.io/vault-role="default"
# kubectl annotate secret dockerhub vault.security.banzaicloud.io/vault-skip-verify="true"
# kubectl annotate secret dockerhub vault.security.banzaicloud.io/vault-path="kubernetes"

# ---

# apiVersion: v1
# kind: Secret
# metadata:
#   name: sample-secret
#   annotations:
#     vault.security.banzaicloud.io/vault-addr: "https://vault-server.vault.svc.cluster.local:8200"
#     vault.security.banzaicloud.io/vault-role: "default" # In case of Secrets the webhook's ServiceAccount is used
#     vault.security.banzaicloud.io/vault-skip-verify: "true"
#     vault.security.banzaicloud.io/vault-path: "kubernetes"
# type: kubernetes.io/dockerconfigjson
# data:
#   .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL2RvY2tlci5pbyI6eyJ1c2VybmFtZSI6InZhdWx0OnNlY3JldC9kYXRhL2RvY

